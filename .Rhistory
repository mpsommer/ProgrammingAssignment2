install.packages("KernSmooth")
library(KernSmooth)
add2 <- function(x, y) {
x + y
}
add(3, 5)
add2(3, 5)
above <- function(x, n) {
use <- nx > n
x[use]
}
x <- 1:20
above(x, 15)
above <- function(x, n) {
use <- x > n
x[use]
}
above(x, 15)
swirl()
swirl
?swirl
??swirl
swirl::restart
swirl()
install.packages("swirl")
install.packages("swirl")
> library("swirl")
library("swirl")
swirl()
1
swirl()
TRUE == FALSE
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6< 7
10 <=10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE |
| c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which((ints > 5))
which((ints > 7))
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Data()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 19))
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(dat)]}, dat = c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("this is a test")
submit()
mad_libs(place = "seattle", noun = "Amazon", adjective = "Sucks")
submit()
submit()
'I' %p% 'love' %R!%
df
'I' %p% 'love' %p% 'R!'
swirl()
library("swirl")
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- asDate("1969-01-01")
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <= Sys.time()
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
tx <- as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2''
t2
uclass(t2)
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <= "October 17, 1986 08:24"
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
zzTilIiC7rPwf0js
cube <- function(x, n) { x^3}
cube(3)
x <- 1:10
if(x > 5) {}
if(x > 5) {x <- 0}
x
x <- 0
x
y <- 5
x <- 5
y <- if(x < 3) {NA} else {10}
y
clear
library(datasets)
data("iris")
?iris
iris
class(iris)
virginica <- data.frame(iris, species=virginica)
virginica <- iris[iris[, "species"] == "virginica"]
virginica <- iris[iris[, "Species"] == "virginica"]
head(iris)
iris
virginica <- iris[iris[, "Species"] == virginica]
subset(iris, iris[, Species] == virgincia)
subset(iris, iris[, Species] == virginica)
subset(iris, iris[, Species] == "virginica")
subset(iris, iris[, "Species"] == "virginica")
virginica <- subset(iris, iris[, "Species"] == "virginica")
virginica
sapply(virginica[1], mean)
pply(iris, 2, mean)
apply(iris, 2, mean)
apply(iris, 1, mean)
class(apply(iris, 2, mean))
class(apply(iris, 1, mean))
?apply(array, margin, ...)
head(iris)
apply(iris, 2, mean)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 2, mean)
a <- apply(iris[, 1:4], 2, mean)
class(a)
is.vector(a)
clear
library(datasets)
data(mtcars)
mtcars
class(mtcars)
?mtcars
mtcars
head(mtcars)
?tapply
?split
split(mtcars, mtcars$cyl)
split(mtcars, mtcars$cyl)
split(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
apply(mtcars, 2, mean)
correct3 <- sapply(split(mtcars$mpg, mtcars$cyl), mean)
correct3
correct3
lapply(mtcars, mean)
correct3
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
split(mtcars, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
correct3
correct4 <- sapply(split(mtcars$mpg, mtcars$cyl), mean)
head(mtcars)
correct4 <- sapply(split(mtcars$hp, mtcars$cyl), mean)
correct4
?abs
c <- c(correct4[1], correct4[3])
c
abs(c)
correct4[3] - correct4[1]
debug(ls)
ls
ls()
exit
exit()
?debug
clear
getwd()
setwd("/Users/mpsommer/Documents/R programming/ProgrammingAssignment2")
setwd("/Users/mpsommer/Documents/coursera/R programming/ProgrammingAssignment2")
getwd()
list.files
list.files()
source("cachematrix.R")
makeCacheMatrix()
testMatrix <- matrix(c(1,2,3,4,5,6,7,8,9), nrow=3, ncol=3);
testMatris
testMatrix
clear
makeCacheMatrix(testMatrix)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
clear
makeVector(c(1,2,3,4,5))
madeVector <- makeVector(c(1,2,3,4,5))
madeVector
makeVector()
makeVector(x)
x
rm(list=ls())
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
madeVector <- makeVector()
madeVector
madeVector$get()
madeVector$set()
madeVector$set(c(1, 2, 3, 4, 5))
madeVector$get()
madeVector$getmean()
madeVector$setmean()
cachemean
cachemean$
()
madeCacheMean <- cachemean(madeVector)
madeCacheMean
madeCacheMean <- cachemean(madeVector)
testMatrix
testMatrix <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), nrow=3, ncol=3)
testMatrix
solve(testMatrix)
class(testMatrix)
solve(testMatrix)
det(testMatrix)
testMatrix <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), nrow=3, byrow=TRUE)
testMatrix
det(testMatrix)
solve(testMatrix)
testMatrix <- matrix(c(1, 2, 3), nrow=3, byrow=TRUE)
testMatrix <- matrix(c(0,2,2,1,1,10,1,2), nrow=3, byrow=TRUE)
testMatrix <- matrix(c(0,2,2,1,1,1,0,1,2), nrow=3, byrow=TRUE)
testMatrix
det(testMatrix)
solve(testMatrix)
source('~/Documents/coursera/R programming/ProgrammingAssignment2/cachematrix.R')
madeCacheMatrix <- makeCacheMatrix()
madeCacheMatrix
madeCacheMatrix$set()
madeCacheMatrix$get()
madeCacheMatrix$setInverse()
madeCacheMatrix$getInverse()
source('~/Documents/coursera/R programming/ProgrammingAssignment2/cachematrix.R')
source('~/Documents/coursera/R programming/ProgrammingAssignment2/cachematrix.R')
madeCacheMatrix$setInverse()
madeCacheMatrix$get()s
madeCacheMatrix$get()
is.null(madeCacheMatrix$get())
is.na(madeCacheMatrix$get())
z <- madeCacheMatrix$getInverse()
z
is.null(z)
source('~/Documents/coursera/R programming/ProgrammingAssignment2/cachematrix.R')
solve(testMatrix)
source('~/Documents/coursera/R programming/ProgrammingAssignment2/cachematrix.R')
madeCacheMatrix$set(testMatrix)
madeCacheMatrix$get()
madeCacheSolve <-cacheSolve(madeCacheMatrix)
madeCacheSolve
cacheSolve(madeCacheMatrix)
source('~/Documents/coursera/R programming/ProgrammingAssignment2/cachematrix.R')
source('~/Documents/coursera/R programming/ProgrammingAssignment2/cachematrix.R')
source('~/Documents/coursera/R programming/ProgrammingAssignment2/cachematrix.R')
source('~/Documents/coursera/R programming/ProgrammingAssignment2/cachematrix.R')
source('~/Documents/coursera/R programming/ProgrammingAssignment2/cachematrix.R')
source('~/Documents/coursera/R programming/ProgrammingAssignment2/cachematrix.R')
solve(testMatrix)
source('~/Documents/coursera/R programming/ProgrammingAssignment2/cachematrix.R')
